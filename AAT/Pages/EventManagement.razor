@page "/eventmanagement"
@using AATMODELS.DTOs
@using System.Net.Http
@using System.Net.Http.Json
@using AAT.Services

<h3>Event Management</h3>

@inject EventClientService EventClientService

<!-- Display error message, if any -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<!-- Display list of events -->
@if (events == null)
{
    <p>Loading events...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Total Seats</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventData in events)
            {
                <tr>
                    <td>@eventData.Name</td>
                    <td>@eventData.Date.ToShortDateString()</td>
                    <td>@eventData.TotalSeats</td>
                    <td>
                        <a href="/eventmanagement/edit/@eventData.Id">Edit</a> |
                        <button @onclick="() => DeleteEvent(eventData.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Add new event form -->
<h4>Create New Event</h4>
<div class="form">
    <div class="form-group">
        <label for="eventName">Name:</label>
        <input type="text" id="eventName" @bind="newEvent.Name" />
    </div>
    <div class="form-group">
        <label for="eventDate">Date:</label>
        <input type="date" id="eventDate" @bind="newEvent.Date" />
    </div>
    <div class="form-group">
        <label for="eventTotalSeats">Total Seats:</label>
        <input type="number" id="eventTotalSeats" @bind="newEvent.TotalSeats" />
    </div>
    <button @onclick="CreateEvent">Create Event</button>
</div>

@code {
    private List<EventDto> events = new List<EventDto>(); // Initialize events list
    private EventDto newEvent = new EventDto();
    private string errorMessage; // Store error message

    protected override async Task OnInitializedAsync()
    {
        // Fetch and populate the list of events using the EventClientService
        events = await EventClientService.GetEventsAsync();
    }

    private async Task CreateEvent()
    {
        try
        {
            // Send a POST request to the API to create a new event
            var response = await EventClientService.CreateEventAsync(newEvent);

            if (response != null)
            {
                // Refresh the event list after successful creation
                events = await EventClientService.GetEventsAsync();

                // Clear the form fields
                newEvent = new EventDto();
            }
        }
        catch (Exception ex)
        {
            // Handle the exception by displaying the error message to the user
            errorMessage = $"Error creating event: {ex.Message}";
        }
    }

    private async Task DeleteEvent(int eventId)
    {
        // Send a DELETE request to the API to delete an event
        var isSuccess = await EventClientService.DeleteEventAsync(eventId);

        if (isSuccess)
        {
            // Refresh the event list after successful deletion
            events = await EventClientService.GetEventsAsync();
        }
    }
}
